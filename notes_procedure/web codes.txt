


====================================================================
on windows machine 
====================================================================

notepad > file1.html
<h1> The first people to successfully climb Mount Everest were Edmund Hillary and Tenzing Norgay, reaching the summit on May 29, 1953.  </h1>











====================================================================
on windows machine ====> shows engine dependncy, install xaamp
====================================================================



notepad > file2.php

<!DOCTYPE html>
<html>
      <head>
          <title>Mount Everest Climb</title>
      </head>
      <body>

      <?php
      $climbers = "Edmund Hillary and Tenzing Norgay";
      $date = "May 29, 1953";
      echo "<h1>The first people to successfully climb Mount Everest were $climbers, reaching the summit on $date.</h1>";
      ?>

</body>
</html>









====================================================================
Now on linux machine ====> shows engine dependncy
                          install packages "php libapache2-mod-php"
====================================================================

Take this 1 hour SANDBOX , ubuntu machine
https://killercoda.com/killer-shell-cka/scenario/playground




sudo apt install apache2 php libapache2-mod-php -y
sudo mkdir /var/www/html/mero_files

sudo cat >  /var/www/html/mero_files/file1.html

sudo cat >  /var/www/html/mero_files/file2.php

sudo systemctl start apache2
sudo systemctl enable apache2









====================================================================
Now on linux machine ====> now for Python File
                          install packages "flask "

pip install flask
apt install python3-flask
====================================================================

cat > /var/www/html/mero_files/everest_app.py

from flask import Flask
app = Flask(__name__)

@app.route('/')
def everest():
    climbers = "Edmund Hillary and Tenzing Norgay"
    date = "May 29, 1953"
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Mount Everest Climb</title>
    </head>
    <body>
        <h1>The first people to successfully climb Mount Everest were {climbers}, reaching the summit on {date}.</h1>
    </body>
    </html>
    '''

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)



python3 /var/www/html/mero_files/everest_app.py





====================================================================
Now on linux machine ====> same as  Python , we can go with
                          JAVA"tomcat" , node, MERN etc all
                          install packages/engine "xxx  "
====================================================================




====================================================================
Simulate Port 5000 Conflict on Linux
====================================================================

TAB2 :  Run Something on Same Port 5000

cat > /var/www/html/mero_files/makalu.py

from flask import Flask
app = Flask(__name__)

@app.route('/')
def makalu():
    climbers = "Jean Franco, Guido Magnone, and Lionel Terray"
    date = "May 15, 1955"
    return f'''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Makalu Expedition</title>
    </head>
    <body>
        <h1>The first successful ascent of Mount Makalu was made by {climbers} on {date} during a French expedition.</h1>
    </body>
    </html>
    '''

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)






controlplane:~$ netstat -tnl | grep 5000
tcp        0      0 0.0.0.0:5000            0.0.0.0:*               LISTEN 




controlplane:~$ python3 /var/www/html/mero_files/makalu.py
 * Serving Flask app 'makalu'
 * Debug mode: off
Address already in use
Port 5000 is in use by another program. Either identify and stop that program, or start the server with a different port.




✅ Solution: Run with Docker and Use Port Mapping
Docker lets you map the same internal container 
port (5000) to different external host ports. So you
can isolate and run both apps at the same time...




====================================================================
NOW more on micro sevice , we go docker
====================================================================

cd /var/www/html/mero_files

controlplane:/var/www/html/mero_files$ cat > Dockerfile 

# Dockerfile
FROM python:3.10-slim
WORKDIR /app
COPY makalu.py .
RUN pip install flask
CMD ["python", "makalu.py"]


controlplane:/var/www/html/mero_files$ docker build -t makalu-app -f Dockerfile .


Sending build context to Docker daemon  6.656kB
Step 1/5 : FROM python:3.10-slim                          << microserice / layer 1
3.10-slim: Pulling from library/python
dad67da3f26b: Pull complete 
4b03b4f4fa5c: Pull complete 
50a956a18493: Pull complete 
c14326ed6c85: Pull complete 
Digest: sha256:034724ef64585eeb0e82385e9aabcbeabfe5f7cae2c2dcedb1da95114372b6d7
Status: Downloaded newer image for python:3.10-slim
 ---> cce3651534b6
Step 2/5 : WORKDIR /app                                   << microserice / layer 2
 ---> Running in fd9c3b7459c0
 ---> Removed intermediate container fd9c3b7459c0
 ---> c0a93b7aad41
Step 3/5 : COPY makalu.py .                                << microserice / layer 3
 ---> 6ebca2ace291
Step 4/5 : RUN pip install flask                           << microserice / layer 4
 ---> Running in 2f113946efbe
Collecting flask
  Downloading flask-3.1.1-py3-none-any.whl (103 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 103.3/103.3 kB 2.0 MB/s eta 0:00:00
Collecting markupsafe>=2.1.1
  Downloading MarkupSafe-3.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (20 kB)
Collecting jinja2>=3.1.2
  Downloading jinja2-3.1.6-py3-none-any.whl (134 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 134.9/134.9 kB 5.2 MB/s eta 0:00:00
Collecting itsdangerous>=2.2.0
  Downloading itsdangerous-2.2.0-py3-none-any.whl (16 kB)
Collecting blinker>=1.9.0
  Downloading blinker-1.9.0-py3-none-any.whl (8.5 kB)
Collecting werkzeug>=3.1.0
  Downloading werkzeug-3.1.3-py3-none-any.whl (224 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 224.5/224.5 kB 893.6 kB/s eta 0:00:00
Collecting click>=8.1.3
  Downloading click-8.2.1-py3-none-any.whl (102 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 102.2/102.2 kB 5.3 MB/s eta 0:00:00
Installing collected packages: markupsafe, itsdangerous, click, blinker, werkzeug, jinja2, flask
Successfully installed blinker-1.9.0 click-8.2.1 flask-3.1.1 itsdangerous-2.2.0 jinja2-3.1.6 markupsafe-3.0.2 werkzeug-3.1.3
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv

[notice] A new release of pip is available: 23.0.1 -> 25.1.1
[notice] To update, run: pip install --upgrade pip
 ---> Removed intermediate container 2f113946efbe
 ---> 4cc979cf6d34
Step 5/5 : CMD ["python", "makalu.py"]                             << microserice / layer 5
 ---> Running in 2edaa0b8caba
 ---> Removed intermediate container 2edaa0b8caba
 ---> e1bf43fbff96
Successfully built e1bf43fbff96
Successfully tagged makalu-app:latest





controlplane:/var/www/html/mero_files$ docker images
REPOSITORY   TAG         IMAGE ID       CREATED         SIZE
makalu-app   latest      e1bf43fbff96   2 minutes ago   139MB
python       3.10-slim   cce3651534b6   3 weeks ago     127MB


controlplane:/var/www/html/mero_files$ docker run -d -p 5002:5000 --name makalu-container makalu-app





--------------------------------------
controlplane:/var/www/html/mero_files$ cat > Dockerfile2 

# Dockerfile
FROM python:3.10-slim
WORKDIR /app
COPY everest_app.py .
RUN pip install flask
CMD ["python", "makalu.py"]


controlplane:/var/www/html/mero_files$ docker build -t everest-app -f Dockerfile2 .



controlplane:/var/www/html/mero_files$ docker images
REPOSITORY    TAG         IMAGE ID       CREATED          SIZE
everest-app   latest      2300b968de51   27 seconds ago   139MB
makalu-app    latest      e1bf43fbff96   6 minutes ago    139MB
python        3.10-slim   cce3651534b6   3 weeks ago      127MB





controlplane:/var/www/html/mero_files$ docker ps
CONTAINER ID   IMAGE        COMMAND              CREATED         STATUS         PORTS                                         NAMES
2ecbd976f474   makalu-app   "python makalu.py"   3 minutes ago   Up 3 minutes   0.0.0.0:5002->5000/tcp, [::]:5002->5000/tcp   makalu-container








====================================================================

====================================================================








